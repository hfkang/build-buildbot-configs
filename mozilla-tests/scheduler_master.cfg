# vim: ft=python
import traceback
def flag(num):

    print 'flag#: %i'%num


flag(1)
from copy import deepcopy

# import/reload dance so that reconfigs work
import buildbotcustom.misc
import master_common
import config
import thunderbird_config
import mobile_config
import master_localconfig
reload(buildbotcustom.misc)
reload(master_common)
reload(config)
reload(thunderbird_config)
reload(mobile_config)
reload(master_localconfig)

flag(2)
from master_common import BuildmasterConfig
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.iteritems():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value
flag(3)

# Create our QueueDir objects
# This is reloaded in buildbotcustom.misc
from mozilla_buildtools.queuedir import QueueDir
commandsQueue = QueueDir('commands', '%s/commands' % master_localconfig.QUEUEDIR)
flag(4)
from config import BRANCHES, PLATFORMS, SUITES, BRANCH_UNITTEST_VARS, PROJECTS, SLAVES
from thunderbird_config import BRANCHES as THUNDERBIRD_BRANCHES
from thunderbird_config import PLATFORMS as THUNDERBIRD_PLATFORMS
from thunderbird_config import SUITES as THUNDERBIRD_SUITES
from thunderbird_config import BRANCH_UNITTEST_VARS as THUNDERBIRD_BRANCH_UNITTEST_VARS
from mobile_config import BRANCHES as MOBILE_BRANCHES
from mobile_config import PLATFORMS as MOBILE_PLATFORMS
from mobile_config import SUITES as MOBILE_SUITES
from mobile_config import BRANCH_UNITTEST_VARS as MOBILE_BRANCH_UNITTEST_VARS
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PLATFORMS, ACTIVE_PROJECTS, \
    ACTIVE_THUNDERBIRD_BRANCHES, ACTIVE_THUNDERBIRD_PLATFORMS, \
    ACTIVE_MOBILE_BRANCHES, ACTIVE_MOBILE_PLATFORMS
flag(5)

from buildbotcustom.misc import generateTalosBranchObjects, generateProjectObjects, mergeBuildObjects

for p in ACTIVE_PLATFORMS.keys():
    ACTIVE_PLATFORMS[p] = deepcopy(PLATFORMS[p])

for p in ACTIVE_THUNDERBIRD_PLATFORMS.keys():
    ACTIVE_THUNDERBIRD_PLATFORMS[p] = deepcopy(THUNDERBIRD_PLATFORMS[p])

for p in ACTIVE_MOBILE_PLATFORMS.keys():
    ACTIVE_MOBILE_PLATFORMS[p] = deepcopy(MOBILE_PLATFORMS[p])
flag(6)
buildObjects = {}
#F: why does it quit here? Why can't I get a traceback?

intboop = 0
def boop(msg):
    global intboop
    print 'boop #%i: %s' %(intboop,msg)
    intboop=intboop+1

try:
    flag(600)
    boop("All branches: %s" % ACTIVE_BRANCHES)
    for branch in ACTIVE_BRANCHES:
        if branch == 'mozilla-esr45':
            boop("%s : %i  : %i" %(branch, len(BRANCHES[branch]),len(ACTIVE_PLATFORMS)))
        talosObjects = generateTalosBranchObjects(branch, BRANCHES[branch],
                                                  ACTIVE_PLATFORMS, SUITES,
                                                  BRANCH_UNITTEST_VARS['platforms'])
        boop("Done generating talos objects for %s" % branch)
        buildObjects = mergeBuildObjects(buildObjects, talosObjects)
        boop("Done generating build objects for %s" % branch)
    flag(60)
    for branch in ACTIVE_THUNDERBIRD_BRANCHES:
        talosObjects = generateTalosBranchObjects(branch, THUNDERBIRD_BRANCHES[branch],
                                                  ACTIVE_THUNDERBIRD_PLATFORMS, THUNDERBIRD_SUITES,
                                                  THUNDERBIRD_BRANCH_UNITTEST_VARS['platforms'])
        buildObjects = mergeBuildObjects(buildObjects, talosObjects)
    flag(61)
    for branch in ACTIVE_MOBILE_BRANCHES:
        talosObjects = generateTalosBranchObjects(branch, MOBILE_BRANCHES[branch],
                                                  ACTIVE_MOBILE_PLATFORMS, MOBILE_SUITES,
                                                  MOBILE_BRANCH_UNITTEST_VARS['platforms'])
        buildObjects = mergeBuildObjects(buildObjects, talosObjects)
    flag(62)
    for project in ACTIVE_PROJECTS:
        projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
        buildObjects = mergeBuildObjects(buildObjects, projectObjects)
except Exception:
    traceback.print_exc()
flag(7)
# We only want the schedulers and change sources
c['schedulers'].extend(buildObjects['schedulers'])
c['change_source'].extend(buildObjects['change_source'])
flag(8)
# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())
flag(9)
import passwords
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 60
c['multiMaster'] = True

# Scheduler masters don't need to prioritize builders, since they never have
# any workers.
del c['prioritizeBuilders']
flag(10)
if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('fuzzer-.*')],
        send_logs=False,
    ))
flag(11)
# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig

#F: hello my name is francis and this is my show, cooking with dog!
